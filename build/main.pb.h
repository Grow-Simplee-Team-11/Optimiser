// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_main_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_main_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_main_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_main_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_main_2eproto;
namespace optimizer {
class Bin;
struct BinDefaultTypeInternal;
extern BinDefaultTypeInternal _Bin_default_instance_;
class Cluster;
struct ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Coordinate;
struct CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class Dimension;
struct DimensionDefaultTypeInternal;
extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class OptimizerRequest;
struct OptimizerRequestDefaultTypeInternal;
extern OptimizerRequestDefaultTypeInternal _OptimizerRequest_default_instance_;
class OptimizerResponse;
struct OptimizerResponseDefaultTypeInternal;
extern OptimizerResponseDefaultTypeInternal _OptimizerResponse_default_instance_;
class Package;
struct PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ResponsePackage;
struct ResponsePackageDefaultTypeInternal;
extern ResponsePackageDefaultTypeInternal _ResponsePackage_default_instance_;
}  // namespace optimizer
PROTOBUF_NAMESPACE_OPEN
template<> ::optimizer::Bin* Arena::CreateMaybeMessage<::optimizer::Bin>(Arena*);
template<> ::optimizer::Cluster* Arena::CreateMaybeMessage<::optimizer::Cluster>(Arena*);
template<> ::optimizer::Coordinate* Arena::CreateMaybeMessage<::optimizer::Coordinate>(Arena*);
template<> ::optimizer::Dimension* Arena::CreateMaybeMessage<::optimizer::Dimension>(Arena*);
template<> ::optimizer::OptimizerRequest* Arena::CreateMaybeMessage<::optimizer::OptimizerRequest>(Arena*);
template<> ::optimizer::OptimizerResponse* Arena::CreateMaybeMessage<::optimizer::OptimizerResponse>(Arena*);
template<> ::optimizer::Package* Arena::CreateMaybeMessage<::optimizer::Package>(Arena*);
template<> ::optimizer::Position* Arena::CreateMaybeMessage<::optimizer::Position>(Arena*);
template<> ::optimizer::ResponsePackage* Arena::CreateMaybeMessage<::optimizer::ResponsePackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimizer {

// ===================================================================

class OptimizerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.OptimizerResponse) */ {
 public:
  inline OptimizerResponse() : OptimizerResponse(nullptr) {}
  ~OptimizerResponse() override;
  explicit PROTOBUF_CONSTEXPR OptimizerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizerResponse(const OptimizerResponse& from);
  OptimizerResponse(OptimizerResponse&& from) noexcept
    : OptimizerResponse() {
    *this = ::std::move(from);
  }

  inline OptimizerResponse& operator=(const OptimizerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizerResponse& operator=(OptimizerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizerResponse* internal_default_instance() {
    return reinterpret_cast<const OptimizerResponse*>(
               &_OptimizerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OptimizerResponse& a, OptimizerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptimizerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptimizerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptimizerResponse& from) {
    OptimizerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.OptimizerResponse";
  }
  protected:
  explicit OptimizerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClustersFieldNumber = 1,
  };
  // repeated .optimizer.Cluster clusters = 1;
  int clusters_size() const;
  private:
  int _internal_clusters_size() const;
  public:
  void clear_clusters();
  ::optimizer::Cluster* mutable_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Cluster >*
      mutable_clusters();
  private:
  const ::optimizer::Cluster& _internal_clusters(int index) const;
  ::optimizer::Cluster* _internal_add_clusters();
  public:
  const ::optimizer::Cluster& clusters(int index) const;
  ::optimizer::Cluster* add_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Cluster >&
      clusters() const;

  // @@protoc_insertion_point(class_scope:optimizer.OptimizerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Cluster > clusters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Cluster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.Cluster) */ {
 public:
  inline Cluster() : Cluster(nullptr) {}
  ~Cluster() override;
  explicit PROTOBUF_CONSTEXPR Cluster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cluster(const Cluster& from);
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster& operator=(Cluster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cluster& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }
  inline void Swap(Cluster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cluster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cluster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cluster& from) {
    Cluster::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.Cluster";
  }
  protected:
  explicit Cluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
  };
  // repeated .optimizer.ResponsePackage packages = 1;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::optimizer::ResponsePackage* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::ResponsePackage >*
      mutable_packages();
  private:
  const ::optimizer::ResponsePackage& _internal_packages(int index) const;
  ::optimizer::ResponsePackage* _internal_add_packages();
  public:
  const ::optimizer::ResponsePackage& packages(int index) const;
  ::optimizer::ResponsePackage* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::ResponsePackage >&
      packages() const;

  // @@protoc_insertion_point(class_scope:optimizer.Cluster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::ResponsePackage > packages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class ResponsePackage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.ResponsePackage) */ {
 public:
  inline ResponsePackage() : ResponsePackage(nullptr) {}
  ~ResponsePackage() override;
  explicit PROTOBUF_CONSTEXPR ResponsePackage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePackage(const ResponsePackage& from);
  ResponsePackage(ResponsePackage&& from) noexcept
    : ResponsePackage() {
    *this = ::std::move(from);
  }

  inline ResponsePackage& operator=(const ResponsePackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePackage& operator=(ResponsePackage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePackage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePackage* internal_default_instance() {
    return reinterpret_cast<const ResponsePackage*>(
               &_ResponsePackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponsePackage& a, ResponsePackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePackage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponsePackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponsePackage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponsePackage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponsePackage& from) {
    ResponsePackage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePackage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.ResponsePackage";
  }
  protected:
  explicit ResponsePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .optimizer.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::optimizer::Position& position() const;
  PROTOBUF_NODISCARD ::optimizer::Position* release_position();
  ::optimizer::Position* mutable_position();
  void set_allocated_position(::optimizer::Position* position);
  private:
  const ::optimizer::Position& _internal_position() const;
  ::optimizer::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::optimizer::Position* position);
  ::optimizer::Position* unsafe_arena_release_position();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimizer.ResponsePackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::optimizer::Position* position_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kLengthFieldNumber = 4,
    kBreadthFieldNumber = 5,
    kHeightFieldNumber = 6,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float length = 4;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float breadth = 5;
  void clear_breadth();
  float breadth() const;
  void set_breadth(float value);
  private:
  float _internal_breadth() const;
  void _internal_set_breadth(float value);
  public:

  // float height = 6;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:optimizer.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float length_;
    float breadth_;
    float height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class OptimizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.OptimizerRequest) */ {
 public:
  inline OptimizerRequest() : OptimizerRequest(nullptr) {}
  ~OptimizerRequest() override;
  explicit PROTOBUF_CONSTEXPR OptimizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizerRequest(const OptimizerRequest& from);
  OptimizerRequest(OptimizerRequest&& from) noexcept
    : OptimizerRequest() {
    *this = ::std::move(from);
  }

  inline OptimizerRequest& operator=(const OptimizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizerRequest& operator=(OptimizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptimizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizerRequest* internal_default_instance() {
    return reinterpret_cast<const OptimizerRequest*>(
               &_OptimizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OptimizerRequest& a, OptimizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptimizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptimizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptimizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptimizerRequest& from) {
    OptimizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptimizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.OptimizerRequest";
  }
  protected:
  explicit OptimizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
    kBinFieldNumber = 2,
    kWarehouseFieldNumber = 3,
    kRidersFieldNumber = 4,
  };
  // repeated .optimizer.Package packages = 1;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::optimizer::Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Package >*
      mutable_packages();
  private:
  const ::optimizer::Package& _internal_packages(int index) const;
  ::optimizer::Package* _internal_add_packages();
  public:
  const ::optimizer::Package& packages(int index) const;
  ::optimizer::Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Package >&
      packages() const;

  // .optimizer.Bin bin = 2;
  bool has_bin() const;
  private:
  bool _internal_has_bin() const;
  public:
  void clear_bin();
  const ::optimizer::Bin& bin() const;
  PROTOBUF_NODISCARD ::optimizer::Bin* release_bin();
  ::optimizer::Bin* mutable_bin();
  void set_allocated_bin(::optimizer::Bin* bin);
  private:
  const ::optimizer::Bin& _internal_bin() const;
  ::optimizer::Bin* _internal_mutable_bin();
  public:
  void unsafe_arena_set_allocated_bin(
      ::optimizer::Bin* bin);
  ::optimizer::Bin* unsafe_arena_release_bin();

  // .optimizer.Coordinate warehouse = 3;
  bool has_warehouse() const;
  private:
  bool _internal_has_warehouse() const;
  public:
  void clear_warehouse();
  const ::optimizer::Coordinate& warehouse() const;
  PROTOBUF_NODISCARD ::optimizer::Coordinate* release_warehouse();
  ::optimizer::Coordinate* mutable_warehouse();
  void set_allocated_warehouse(::optimizer::Coordinate* warehouse);
  private:
  const ::optimizer::Coordinate& _internal_warehouse() const;
  ::optimizer::Coordinate* _internal_mutable_warehouse();
  public:
  void unsafe_arena_set_allocated_warehouse(
      ::optimizer::Coordinate* warehouse);
  ::optimizer::Coordinate* unsafe_arena_release_warehouse();

  // int32 riders = 4;
  void clear_riders();
  int32_t riders() const;
  void set_riders(int32_t value);
  private:
  int32_t _internal_riders() const;
  void _internal_set_riders(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimizer.OptimizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Package > packages_;
    ::optimizer::Bin* bin_;
    ::optimizer::Coordinate* warehouse_;
    int32_t riders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Coordinate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.Coordinate) */ {
 public:
  inline Coordinate() : Coordinate(nullptr) {}
  ~Coordinate() override;
  explicit PROTOBUF_CONSTEXPR Coordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinate(const Coordinate& from);
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinate& from) {
    Coordinate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.Coordinate";
  }
  protected:
  explicit Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // int64 longitude = 1;
  void clear_longitude();
  int64_t longitude() const;
  void set_longitude(int64_t value);
  private:
  int64_t _internal_longitude() const;
  void _internal_set_longitude(int64_t value);
  public:

  // int64 latitude = 2;
  void clear_latitude();
  int64_t latitude() const;
  void set_latitude(int64_t value);
  private:
  int64_t _internal_latitude() const;
  void _internal_set_latitude(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimizer.Coordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t longitude_;
    int64_t latitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  explicit PROTOBUF_CONSTEXPR Package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Package& from) {
    Package::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kCoordinatesFieldNumber = 3,
    kIdFieldNumber = 1,
    kWeightFieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // .optimizer.Dimension size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::optimizer::Dimension& size() const;
  PROTOBUF_NODISCARD ::optimizer::Dimension* release_size();
  ::optimizer::Dimension* mutable_size();
  void set_allocated_size(::optimizer::Dimension* size);
  private:
  const ::optimizer::Dimension& _internal_size() const;
  ::optimizer::Dimension* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::optimizer::Dimension* size);
  ::optimizer::Dimension* unsafe_arena_release_size();

  // .optimizer.Coordinate coordinates = 3;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::optimizer::Coordinate& coordinates() const;
  PROTOBUF_NODISCARD ::optimizer::Coordinate* release_coordinates();
  ::optimizer::Coordinate* mutable_coordinates();
  void set_allocated_coordinates(::optimizer::Coordinate* coordinates);
  private:
  const ::optimizer::Coordinate& _internal_coordinates() const;
  ::optimizer::Coordinate* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::optimizer::Coordinate* coordinates);
  ::optimizer::Coordinate* unsafe_arena_release_coordinates();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // float weight = 4;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // int32 time = 5;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimizer.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::optimizer::Dimension* size_;
    ::optimizer::Coordinate* coordinates_;
    int32_t id_;
    float weight_;
    int32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Bin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.Bin) */ {
 public:
  inline Bin() : Bin(nullptr) {}
  ~Bin() override;
  explicit PROTOBUF_CONSTEXPR Bin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bin(const Bin& from);
  Bin(Bin&& from) noexcept
    : Bin() {
    *this = ::std::move(from);
  }

  inline Bin& operator=(const Bin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bin& operator=(Bin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bin* internal_default_instance() {
    return reinterpret_cast<const Bin*>(
               &_Bin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Bin& a, Bin& b) {
    a.Swap(&b);
  }
  inline void Swap(Bin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bin& from) {
    Bin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.Bin";
  }
  protected:
  explicit Bin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kCapacityFieldNumber = 2,
  };
  // .optimizer.Dimension size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::optimizer::Dimension& size() const;
  PROTOBUF_NODISCARD ::optimizer::Dimension* release_size();
  ::optimizer::Dimension* mutable_size();
  void set_allocated_size(::optimizer::Dimension* size);
  private:
  const ::optimizer::Dimension& _internal_size() const;
  ::optimizer::Dimension* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::optimizer::Dimension* size);
  ::optimizer::Dimension* unsafe_arena_release_size();

  // float capacity = 2;
  void clear_capacity();
  float capacity() const;
  void set_capacity(float value);
  private:
  float _internal_capacity() const;
  void _internal_set_capacity(float value);
  public:

  // @@protoc_insertion_point(class_scope:optimizer.Bin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::optimizer::Dimension* size_;
    float capacity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Dimension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:optimizer.Dimension) */ {
 public:
  inline Dimension() : Dimension(nullptr) {}
  ~Dimension() override;
  explicit PROTOBUF_CONSTEXPR Dimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimension(const Dimension& from);
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension& operator=(Dimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dimension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dimension& from) {
    Dimension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimizer.Dimension";
  }
  protected:
  explicit Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // float length = 1;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:optimizer.Dimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float length_;
    float width_;
    float height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptimizerResponse

// repeated .optimizer.Cluster clusters = 1;
inline int OptimizerResponse::_internal_clusters_size() const {
  return _impl_.clusters_.size();
}
inline int OptimizerResponse::clusters_size() const {
  return _internal_clusters_size();
}
inline void OptimizerResponse::clear_clusters() {
  _impl_.clusters_.Clear();
}
inline ::optimizer::Cluster* OptimizerResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:optimizer.OptimizerResponse.clusters)
  return _impl_.clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Cluster >*
OptimizerResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:optimizer.OptimizerResponse.clusters)
  return &_impl_.clusters_;
}
inline const ::optimizer::Cluster& OptimizerResponse::_internal_clusters(int index) const {
  return _impl_.clusters_.Get(index);
}
inline const ::optimizer::Cluster& OptimizerResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:optimizer.OptimizerResponse.clusters)
  return _internal_clusters(index);
}
inline ::optimizer::Cluster* OptimizerResponse::_internal_add_clusters() {
  return _impl_.clusters_.Add();
}
inline ::optimizer::Cluster* OptimizerResponse::add_clusters() {
  ::optimizer::Cluster* _add = _internal_add_clusters();
  // @@protoc_insertion_point(field_add:optimizer.OptimizerResponse.clusters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Cluster >&
OptimizerResponse::clusters() const {
  // @@protoc_insertion_point(field_list:optimizer.OptimizerResponse.clusters)
  return _impl_.clusters_;
}

// -------------------------------------------------------------------

// Cluster

// repeated .optimizer.ResponsePackage packages = 1;
inline int Cluster::_internal_packages_size() const {
  return _impl_.packages_.size();
}
inline int Cluster::packages_size() const {
  return _internal_packages_size();
}
inline void Cluster::clear_packages() {
  _impl_.packages_.Clear();
}
inline ::optimizer::ResponsePackage* Cluster::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:optimizer.Cluster.packages)
  return _impl_.packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::ResponsePackage >*
Cluster::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:optimizer.Cluster.packages)
  return &_impl_.packages_;
}
inline const ::optimizer::ResponsePackage& Cluster::_internal_packages(int index) const {
  return _impl_.packages_.Get(index);
}
inline const ::optimizer::ResponsePackage& Cluster::packages(int index) const {
  // @@protoc_insertion_point(field_get:optimizer.Cluster.packages)
  return _internal_packages(index);
}
inline ::optimizer::ResponsePackage* Cluster::_internal_add_packages() {
  return _impl_.packages_.Add();
}
inline ::optimizer::ResponsePackage* Cluster::add_packages() {
  ::optimizer::ResponsePackage* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:optimizer.Cluster.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::ResponsePackage >&
Cluster::packages() const {
  // @@protoc_insertion_point(field_list:optimizer.Cluster.packages)
  return _impl_.packages_;
}

// -------------------------------------------------------------------

// ResponsePackage

// int32 id = 1;
inline void ResponsePackage::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ResponsePackage::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ResponsePackage::id() const {
  // @@protoc_insertion_point(field_get:optimizer.ResponsePackage.id)
  return _internal_id();
}
inline void ResponsePackage::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ResponsePackage::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:optimizer.ResponsePackage.id)
}

// .optimizer.Position position = 2;
inline bool ResponsePackage::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool ResponsePackage::has_position() const {
  return _internal_has_position();
}
inline void ResponsePackage::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::optimizer::Position& ResponsePackage::_internal_position() const {
  const ::optimizer::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimizer::Position&>(
      ::optimizer::_Position_default_instance_);
}
inline const ::optimizer::Position& ResponsePackage::position() const {
  // @@protoc_insertion_point(field_get:optimizer.ResponsePackage.position)
  return _internal_position();
}
inline void ResponsePackage::unsafe_arena_set_allocated_position(
    ::optimizer::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimizer.ResponsePackage.position)
}
inline ::optimizer::Position* ResponsePackage::release_position() {
  
  ::optimizer::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimizer::Position* ResponsePackage::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:optimizer.ResponsePackage.position)
  
  ::optimizer::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::optimizer::Position* ResponsePackage::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimizer::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::optimizer::Position* ResponsePackage::mutable_position() {
  ::optimizer::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:optimizer.ResponsePackage.position)
  return _msg;
}
inline void ResponsePackage::set_allocated_position(::optimizer::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:optimizer.ResponsePackage.position)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline float Position::_internal_x() const {
  return _impl_.x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:optimizer.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:optimizer.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline float Position::_internal_y() const {
  return _impl_.y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:optimizer.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:optimizer.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  _impl_.z_ = 0;
}
inline float Position::_internal_z() const {
  return _impl_.z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:optimizer.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:optimizer.Position.z)
}

// float length = 4;
inline void Position::clear_length() {
  _impl_.length_ = 0;
}
inline float Position::_internal_length() const {
  return _impl_.length_;
}
inline float Position::length() const {
  // @@protoc_insertion_point(field_get:optimizer.Position.length)
  return _internal_length();
}
inline void Position::_internal_set_length(float value) {
  
  _impl_.length_ = value;
}
inline void Position::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:optimizer.Position.length)
}

// float breadth = 5;
inline void Position::clear_breadth() {
  _impl_.breadth_ = 0;
}
inline float Position::_internal_breadth() const {
  return _impl_.breadth_;
}
inline float Position::breadth() const {
  // @@protoc_insertion_point(field_get:optimizer.Position.breadth)
  return _internal_breadth();
}
inline void Position::_internal_set_breadth(float value) {
  
  _impl_.breadth_ = value;
}
inline void Position::set_breadth(float value) {
  _internal_set_breadth(value);
  // @@protoc_insertion_point(field_set:optimizer.Position.breadth)
}

// float height = 6;
inline void Position::clear_height() {
  _impl_.height_ = 0;
}
inline float Position::_internal_height() const {
  return _impl_.height_;
}
inline float Position::height() const {
  // @@protoc_insertion_point(field_get:optimizer.Position.height)
  return _internal_height();
}
inline void Position::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void Position::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:optimizer.Position.height)
}

// -------------------------------------------------------------------

// OptimizerRequest

// repeated .optimizer.Package packages = 1;
inline int OptimizerRequest::_internal_packages_size() const {
  return _impl_.packages_.size();
}
inline int OptimizerRequest::packages_size() const {
  return _internal_packages_size();
}
inline void OptimizerRequest::clear_packages() {
  _impl_.packages_.Clear();
}
inline ::optimizer::Package* OptimizerRequest::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:optimizer.OptimizerRequest.packages)
  return _impl_.packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Package >*
OptimizerRequest::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:optimizer.OptimizerRequest.packages)
  return &_impl_.packages_;
}
inline const ::optimizer::Package& OptimizerRequest::_internal_packages(int index) const {
  return _impl_.packages_.Get(index);
}
inline const ::optimizer::Package& OptimizerRequest::packages(int index) const {
  // @@protoc_insertion_point(field_get:optimizer.OptimizerRequest.packages)
  return _internal_packages(index);
}
inline ::optimizer::Package* OptimizerRequest::_internal_add_packages() {
  return _impl_.packages_.Add();
}
inline ::optimizer::Package* OptimizerRequest::add_packages() {
  ::optimizer::Package* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:optimizer.OptimizerRequest.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimizer::Package >&
OptimizerRequest::packages() const {
  // @@protoc_insertion_point(field_list:optimizer.OptimizerRequest.packages)
  return _impl_.packages_;
}

// .optimizer.Bin bin = 2;
inline bool OptimizerRequest::_internal_has_bin() const {
  return this != internal_default_instance() && _impl_.bin_ != nullptr;
}
inline bool OptimizerRequest::has_bin() const {
  return _internal_has_bin();
}
inline void OptimizerRequest::clear_bin() {
  if (GetArenaForAllocation() == nullptr && _impl_.bin_ != nullptr) {
    delete _impl_.bin_;
  }
  _impl_.bin_ = nullptr;
}
inline const ::optimizer::Bin& OptimizerRequest::_internal_bin() const {
  const ::optimizer::Bin* p = _impl_.bin_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimizer::Bin&>(
      ::optimizer::_Bin_default_instance_);
}
inline const ::optimizer::Bin& OptimizerRequest::bin() const {
  // @@protoc_insertion_point(field_get:optimizer.OptimizerRequest.bin)
  return _internal_bin();
}
inline void OptimizerRequest::unsafe_arena_set_allocated_bin(
    ::optimizer::Bin* bin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bin_);
  }
  _impl_.bin_ = bin;
  if (bin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimizer.OptimizerRequest.bin)
}
inline ::optimizer::Bin* OptimizerRequest::release_bin() {
  
  ::optimizer::Bin* temp = _impl_.bin_;
  _impl_.bin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimizer::Bin* OptimizerRequest::unsafe_arena_release_bin() {
  // @@protoc_insertion_point(field_release:optimizer.OptimizerRequest.bin)
  
  ::optimizer::Bin* temp = _impl_.bin_;
  _impl_.bin_ = nullptr;
  return temp;
}
inline ::optimizer::Bin* OptimizerRequest::_internal_mutable_bin() {
  
  if (_impl_.bin_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimizer::Bin>(GetArenaForAllocation());
    _impl_.bin_ = p;
  }
  return _impl_.bin_;
}
inline ::optimizer::Bin* OptimizerRequest::mutable_bin() {
  ::optimizer::Bin* _msg = _internal_mutable_bin();
  // @@protoc_insertion_point(field_mutable:optimizer.OptimizerRequest.bin)
  return _msg;
}
inline void OptimizerRequest::set_allocated_bin(::optimizer::Bin* bin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bin_;
  }
  if (bin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bin);
    if (message_arena != submessage_arena) {
      bin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bin_ = bin;
  // @@protoc_insertion_point(field_set_allocated:optimizer.OptimizerRequest.bin)
}

// .optimizer.Coordinate warehouse = 3;
inline bool OptimizerRequest::_internal_has_warehouse() const {
  return this != internal_default_instance() && _impl_.warehouse_ != nullptr;
}
inline bool OptimizerRequest::has_warehouse() const {
  return _internal_has_warehouse();
}
inline void OptimizerRequest::clear_warehouse() {
  if (GetArenaForAllocation() == nullptr && _impl_.warehouse_ != nullptr) {
    delete _impl_.warehouse_;
  }
  _impl_.warehouse_ = nullptr;
}
inline const ::optimizer::Coordinate& OptimizerRequest::_internal_warehouse() const {
  const ::optimizer::Coordinate* p = _impl_.warehouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimizer::Coordinate&>(
      ::optimizer::_Coordinate_default_instance_);
}
inline const ::optimizer::Coordinate& OptimizerRequest::warehouse() const {
  // @@protoc_insertion_point(field_get:optimizer.OptimizerRequest.warehouse)
  return _internal_warehouse();
}
inline void OptimizerRequest::unsafe_arena_set_allocated_warehouse(
    ::optimizer::Coordinate* warehouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.warehouse_);
  }
  _impl_.warehouse_ = warehouse;
  if (warehouse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimizer.OptimizerRequest.warehouse)
}
inline ::optimizer::Coordinate* OptimizerRequest::release_warehouse() {
  
  ::optimizer::Coordinate* temp = _impl_.warehouse_;
  _impl_.warehouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimizer::Coordinate* OptimizerRequest::unsafe_arena_release_warehouse() {
  // @@protoc_insertion_point(field_release:optimizer.OptimizerRequest.warehouse)
  
  ::optimizer::Coordinate* temp = _impl_.warehouse_;
  _impl_.warehouse_ = nullptr;
  return temp;
}
inline ::optimizer::Coordinate* OptimizerRequest::_internal_mutable_warehouse() {
  
  if (_impl_.warehouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimizer::Coordinate>(GetArenaForAllocation());
    _impl_.warehouse_ = p;
  }
  return _impl_.warehouse_;
}
inline ::optimizer::Coordinate* OptimizerRequest::mutable_warehouse() {
  ::optimizer::Coordinate* _msg = _internal_mutable_warehouse();
  // @@protoc_insertion_point(field_mutable:optimizer.OptimizerRequest.warehouse)
  return _msg;
}
inline void OptimizerRequest::set_allocated_warehouse(::optimizer::Coordinate* warehouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.warehouse_;
  }
  if (warehouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(warehouse);
    if (message_arena != submessage_arena) {
      warehouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warehouse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.warehouse_ = warehouse;
  // @@protoc_insertion_point(field_set_allocated:optimizer.OptimizerRequest.warehouse)
}

// int32 riders = 4;
inline void OptimizerRequest::clear_riders() {
  _impl_.riders_ = 0;
}
inline int32_t OptimizerRequest::_internal_riders() const {
  return _impl_.riders_;
}
inline int32_t OptimizerRequest::riders() const {
  // @@protoc_insertion_point(field_get:optimizer.OptimizerRequest.riders)
  return _internal_riders();
}
inline void OptimizerRequest::_internal_set_riders(int32_t value) {
  
  _impl_.riders_ = value;
}
inline void OptimizerRequest::set_riders(int32_t value) {
  _internal_set_riders(value);
  // @@protoc_insertion_point(field_set:optimizer.OptimizerRequest.riders)
}

// -------------------------------------------------------------------

// Coordinate

// int64 longitude = 1;
inline void Coordinate::clear_longitude() {
  _impl_.longitude_ = int64_t{0};
}
inline int64_t Coordinate::_internal_longitude() const {
  return _impl_.longitude_;
}
inline int64_t Coordinate::longitude() const {
  // @@protoc_insertion_point(field_get:optimizer.Coordinate.longitude)
  return _internal_longitude();
}
inline void Coordinate::_internal_set_longitude(int64_t value) {
  
  _impl_.longitude_ = value;
}
inline void Coordinate::set_longitude(int64_t value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:optimizer.Coordinate.longitude)
}

// int64 latitude = 2;
inline void Coordinate::clear_latitude() {
  _impl_.latitude_ = int64_t{0};
}
inline int64_t Coordinate::_internal_latitude() const {
  return _impl_.latitude_;
}
inline int64_t Coordinate::latitude() const {
  // @@protoc_insertion_point(field_get:optimizer.Coordinate.latitude)
  return _internal_latitude();
}
inline void Coordinate::_internal_set_latitude(int64_t value) {
  
  _impl_.latitude_ = value;
}
inline void Coordinate::set_latitude(int64_t value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:optimizer.Coordinate.latitude)
}

// -------------------------------------------------------------------

// Package

// int32 id = 1;
inline void Package::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Package::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Package::id() const {
  // @@protoc_insertion_point(field_get:optimizer.Package.id)
  return _internal_id();
}
inline void Package::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Package::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:optimizer.Package.id)
}

// .optimizer.Dimension size = 2;
inline bool Package::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool Package::has_size() const {
  return _internal_has_size();
}
inline void Package::clear_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
}
inline const ::optimizer::Dimension& Package::_internal_size() const {
  const ::optimizer::Dimension* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimizer::Dimension&>(
      ::optimizer::_Dimension_default_instance_);
}
inline const ::optimizer::Dimension& Package::size() const {
  // @@protoc_insertion_point(field_get:optimizer.Package.size)
  return _internal_size();
}
inline void Package::unsafe_arena_set_allocated_size(
    ::optimizer::Dimension* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimizer.Package.size)
}
inline ::optimizer::Dimension* Package::release_size() {
  
  ::optimizer::Dimension* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimizer::Dimension* Package::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:optimizer.Package.size)
  
  ::optimizer::Dimension* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::optimizer::Dimension* Package::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimizer::Dimension>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::optimizer::Dimension* Package::mutable_size() {
  ::optimizer::Dimension* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:optimizer.Package.size)
  return _msg;
}
inline void Package::set_allocated_size(::optimizer::Dimension* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:optimizer.Package.size)
}

// .optimizer.Coordinate coordinates = 3;
inline bool Package::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool Package::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Package::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::optimizer::Coordinate& Package::_internal_coordinates() const {
  const ::optimizer::Coordinate* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimizer::Coordinate&>(
      ::optimizer::_Coordinate_default_instance_);
}
inline const ::optimizer::Coordinate& Package::coordinates() const {
  // @@protoc_insertion_point(field_get:optimizer.Package.coordinates)
  return _internal_coordinates();
}
inline void Package::unsafe_arena_set_allocated_coordinates(
    ::optimizer::Coordinate* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimizer.Package.coordinates)
}
inline ::optimizer::Coordinate* Package::release_coordinates() {
  
  ::optimizer::Coordinate* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimizer::Coordinate* Package::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:optimizer.Package.coordinates)
  
  ::optimizer::Coordinate* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::optimizer::Coordinate* Package::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimizer::Coordinate>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::optimizer::Coordinate* Package::mutable_coordinates() {
  ::optimizer::Coordinate* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:optimizer.Package.coordinates)
  return _msg;
}
inline void Package::set_allocated_coordinates(::optimizer::Coordinate* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:optimizer.Package.coordinates)
}

// float weight = 4;
inline void Package::clear_weight() {
  _impl_.weight_ = 0;
}
inline float Package::_internal_weight() const {
  return _impl_.weight_;
}
inline float Package::weight() const {
  // @@protoc_insertion_point(field_get:optimizer.Package.weight)
  return _internal_weight();
}
inline void Package::_internal_set_weight(float value) {
  
  _impl_.weight_ = value;
}
inline void Package::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:optimizer.Package.weight)
}

// int32 time = 5;
inline void Package::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t Package::_internal_time() const {
  return _impl_.time_;
}
inline int32_t Package::time() const {
  // @@protoc_insertion_point(field_get:optimizer.Package.time)
  return _internal_time();
}
inline void Package::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void Package::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:optimizer.Package.time)
}

// -------------------------------------------------------------------

// Bin

// .optimizer.Dimension size = 1;
inline bool Bin::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool Bin::has_size() const {
  return _internal_has_size();
}
inline void Bin::clear_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
}
inline const ::optimizer::Dimension& Bin::_internal_size() const {
  const ::optimizer::Dimension* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimizer::Dimension&>(
      ::optimizer::_Dimension_default_instance_);
}
inline const ::optimizer::Dimension& Bin::size() const {
  // @@protoc_insertion_point(field_get:optimizer.Bin.size)
  return _internal_size();
}
inline void Bin::unsafe_arena_set_allocated_size(
    ::optimizer::Dimension* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimizer.Bin.size)
}
inline ::optimizer::Dimension* Bin::release_size() {
  
  ::optimizer::Dimension* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimizer::Dimension* Bin::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:optimizer.Bin.size)
  
  ::optimizer::Dimension* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::optimizer::Dimension* Bin::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimizer::Dimension>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::optimizer::Dimension* Bin::mutable_size() {
  ::optimizer::Dimension* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:optimizer.Bin.size)
  return _msg;
}
inline void Bin::set_allocated_size(::optimizer::Dimension* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:optimizer.Bin.size)
}

// float capacity = 2;
inline void Bin::clear_capacity() {
  _impl_.capacity_ = 0;
}
inline float Bin::_internal_capacity() const {
  return _impl_.capacity_;
}
inline float Bin::capacity() const {
  // @@protoc_insertion_point(field_get:optimizer.Bin.capacity)
  return _internal_capacity();
}
inline void Bin::_internal_set_capacity(float value) {
  
  _impl_.capacity_ = value;
}
inline void Bin::set_capacity(float value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:optimizer.Bin.capacity)
}

// -------------------------------------------------------------------

// Dimension

// float length = 1;
inline void Dimension::clear_length() {
  _impl_.length_ = 0;
}
inline float Dimension::_internal_length() const {
  return _impl_.length_;
}
inline float Dimension::length() const {
  // @@protoc_insertion_point(field_get:optimizer.Dimension.length)
  return _internal_length();
}
inline void Dimension::_internal_set_length(float value) {
  
  _impl_.length_ = value;
}
inline void Dimension::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:optimizer.Dimension.length)
}

// float width = 2;
inline void Dimension::clear_width() {
  _impl_.width_ = 0;
}
inline float Dimension::_internal_width() const {
  return _impl_.width_;
}
inline float Dimension::width() const {
  // @@protoc_insertion_point(field_get:optimizer.Dimension.width)
  return _internal_width();
}
inline void Dimension::_internal_set_width(float value) {
  
  _impl_.width_ = value;
}
inline void Dimension::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:optimizer.Dimension.width)
}

// float height = 3;
inline void Dimension::clear_height() {
  _impl_.height_ = 0;
}
inline float Dimension::_internal_height() const {
  return _impl_.height_;
}
inline float Dimension::height() const {
  // @@protoc_insertion_point(field_get:optimizer.Dimension.height)
  return _internal_height();
}
inline void Dimension::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void Dimension::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:optimizer.Dimension.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace optimizer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_main_2eproto
